`
  This script will take an integer and return it in numeral form.
`

`Initialize variables`
("-->" "number" ("<--" "@"))
("-->" "text" "")

`Cache sub-script`
("-->" "class1" ("^" "class1.txt")) `[0-9]`
("-->" "class2" ("^" "class2.txt")) `[10-19]`
("-->" "class3" ("^" "class3.txt")) `[20-99]`
("-->" "class4" ("^" "class4.txt")) `[100-999]`
("-->" "class5" ("^" "class5.txt")) `[1000-999999]`
("-->" "match" ("^" "match.txt"))
("-->" "persist" ("^" "persist.txt"))

`Promote global variables`
("<3" "text")
("<3" "class1")
("<3" "class2")
("<3" "class3")
("<3" "class4")
("<3" "class5")
("<3" "match")
("<3" "persist")

`Run each sub-script for pattern matching`
("~" ("<--" "persist") [ "class1" ("<--" "number") "text" ])
("~" ("<--" "persist") [ "class2" ("<--" "number") "text" ])
("~" ("<--" "persist") [ "class3" ("<--" "number") "text" ])
("~" ("<--" "persist") [ "class4" ("<--" "number") "text" ])
("~" ("<--" "persist") [ "class5" ("<--" "number") "text" ])

`TODO: Million, Billion`
`TODO: Negative`

`Conclusion`
("<--" "text")
