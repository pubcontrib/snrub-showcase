`
  Program which takes a counting number (0, 1, 2, ...) and returns that number
  in English cardinal word form.
`

`Store program arguments`
("x<-" "number" ("x->" "@"))

`Error if the number is negative`
("?" ("<" ("x->" "number") #0#) ("<>" #3#) ?)

`Cache sub-scripts to avoid repeated file reads`
("x<-" "net1" ("[o]->" "app/net1.txt")) ("<3" "net1")
("x<-" "net2" ("[o]->" "app/net2.txt")) ("<3" "net2")
("x<-" "net3" ("[o]->" "app/net3.txt")) ("<3" "net3")
("x<-" "net4" ("[o]->" "app/net4.txt")) ("<3" "net4")
("x<-" "net5" ("[o]->" "app/net5.txt")) ("<3" "net5")
("x<-" "net6" ("[o]->" "app/net6.txt")) ("<3" "net6")
("x<-" "trawl" ("[o]->" "app/trawl.txt")) ("<3" "trawl")

`Run each sub-script as a net to match numbers within their ranges`
("^" "TRAWL" ("x->" "trawl"))
("x<-" "text" "") ("<3" "text")
("TRAWL" ["net1" ("x->" "number") "text"]) `[0-9]`
("TRAWL" ["net2" ("x->" "number") "text"]) `[10-19]`
("TRAWL" ["net3" ("x->" "number") "text"]) `[20-99]`
("TRAWL" ["net4" ("x->" "number") "text"]) `[100-999]`
("TRAWL" ["net5" ("x->" "number") "text"]) `[1000-999999]`
("TRAWL" ["net6" ("x->" "number") "text"]) `[1000000-999999999]`

`Return any matched text`
("x->" "text")
